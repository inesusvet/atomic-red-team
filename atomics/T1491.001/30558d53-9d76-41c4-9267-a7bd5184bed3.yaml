api_version: "2.0"
name: Replace Desktop Wallpaper
description: |
    Downloads an image from a URL and sets it as the desktop wallpaper.
args:
    - name: url_of_wallpaper
      type: url
      default: https://redcanary.com/wp-content/uploads/Atomic-Red-Team-Logo.png
    - name: pointer_to_orginal_wallpaper
      type: string
      default: $env:TEMP\T1491.001-OrginalWallpaperLocation
    - name: wallpaper_location
      type: string
      default: $env:TEMP\T1491.001-newWallpaper.png
uuid: 30558d53-9d76-41c4-9267-a7bd5184bed3
mitre:
    tactics:
        - 'TA0040: Impact'
    techniques:
        - 'T1491: Defacement'
    subtechniques:
        - 'T1491.001: Internal Defacement'
requirements:
    platforms:
        - os: windows
steps:
    - name: replace-desktop-wallpaper
      inline: "$url = \"{{.Args.url_of_wallpaper}}\"\n$imgLocation = \"{{.Args.wallpaper_location}}\"\n$orgWallpaper = (Get-ItemProperty -Path Registry::'HKEY_CURRENT_USER\\Control Panel\\Desktop\\' -Name WallPaper).WallPaper\n$orgWallpaper | Out-File -FilePath \"{{.Args.pointer_to_orginal_wallpaper}}\"\n$updateWallpapercode = @' \nusing System.Runtime.InteropServices; \nnamespace Win32{\n\n    public class Wallpaper{ \n        [DllImport(\"user32.dll\", CharSet=CharSet.Auto)] \n         static extern int SystemParametersInfo (int uAction , int uParam , string lpvParam , int fuWinIni) ; \n         \n         public static void SetWallpaper(string thePath){ \n            SystemParametersInfo(20,0,thePath,3); \n        }\n    }\n} \n'@\n$wc = New-Object System.Net.WebClient  \ntry{  \n    $wc.DownloadFile($url, $imgLocation)\n    add-type $updateWallpapercode \n    [Win32.Wallpaper]::SetWallpaper($imgLocation)\n} \ncatch [System.Net.WebException]{  \n    Write-Host(\"Cannot download $url\") \n    add-type $updateWallpapercode \n    [Win32.Wallpaper]::SetWallpaper($imgLocation)\n} \nfinally{    \n    $wc.Dispose()  \n}\n"
      executor: powershell
      cleanup:
        inline: "$updateWallpapercode = @' \nusing System.Runtime.InteropServices; \nnamespace Win32{\n\n    public class Wallpaper{ \n        [DllImport(\"user32.dll\", CharSet=CharSet.Auto)] \n         static extern int SystemParametersInfo (int uAction , int uParam , string lpvParam , int fuWinIni) ; \n         \n         public static void SetWallpaper(string thePath){ \n            SystemParametersInfo(20,0,thePath,3); \n        }\n    }\n} \n'@\nif (Test-Path -Path {{.Args.pointer_to_orginal_wallpaper}} -PathType Leaf) {\n     $orgImg = Get-Content -Path \"{{.Args.pointer_to_orginal_wallpaper}}\"\n     add-type $updateWallpapercode \n     [Win32.Wallpaper]::SetWallpaper($orgImg)\n}\nRemove-Item \"{{.Args.pointer_to_orginal_wallpaper}}\" -ErrorAction Ignore\nRemove-Item \"{{.Args.wallpaper_location}}\" -ErrorAction Ignore\n"
        executor: powershell
