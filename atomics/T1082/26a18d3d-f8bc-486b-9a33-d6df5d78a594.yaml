api_version: "2.0"
name: Azure Security Scan with SkyArk
description: "Upon successful execution, this test will utilize a valid read-only Azure AD user's credentials to conduct a security scan and determine what users exist in a given tenant, as well as identify any admin users. \nOnce the test is complete, a folder will be output to the temp directory that contains 3 csv files which provide info on the discovered users. \nSee https://github.com/cyberark/SkyArk \n"
args:
    - name: password
      type: string
      default: T1082Az
    - name: username
      type: string
      default: <nil>
uuid: 26a18d3d-f8bc-486b-9a33-d6df5d78a594
mitre:
    tactics:
        - 'TA0007: Discovery'
    techniques:
        - 'T1082: System Information Discovery'
requirements:
    platforms:
        - os: azure-ad
steps:
    - name: |
        The SkyArk AzureStealth module must exist in PathToAtomicsFolder\..\ExternalPayloads.
      inline: |
        if (test-path "PathToAtomicsFolder\..\ExternalPayloads\AzureStealth.ps1"){exit 0} else {{New-Item -Type Directory "PathToAtomicsFolder\..\ExternalPayloads\" -ErrorAction Ignore -Force | Out-Null
        invoke-webrequest "https://raw.githubusercontent.com/cyberark/SkyArk/3293ee145e95061a8980dd7b5da0030edc4da5c0/AzureStealth/AzureStealth.ps1" -outfile "PathToAtomicsFolder\..\ExternalPayloads\AzureStealth.ps1"
        }}
      executor: powershell
    - name: |
        The AzureAD module must be installed.
      inline: |
        try {if (Get-InstalledModule -Name AzureAD -ErrorAction SilentlyContinue) {exit 0} else {{Install-Module -Name AzureAD -Force
        }}} catch {exit 1}
      executor: powershell
    - name: |
        The Az module must be installed.
      inline: |
        try {if (Get-InstalledModule -Name Az -ErrorAction SilentlyContinue) {exit 0} else {{Install-Module -Name Az -Force
        }}} catch {exit 1}
      executor: powershell
    - name: azure-security-scan-with-skyark
      inline: "Import-Module \"PathToAtomicsFolder\\..\\ExternalPayloads\\AzureStealth.ps1\" -force      \n$Password = ConvertTo-SecureString -String \"{{.Args.password}}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"{{.Args.username}}\", $Password\nConnect-AzAccount -Credential $Credential\nConnect-AzureAD -Credential $Credential\nScan-AzureAdmins -UseCurrentCred\n"
      executor: powershell
      cleanup:
        inline: |
            $resultstime = Get-Date -Format "yyyyMMdd"
            $resultsfolder = ("Results-" + $resultstime)
            remove-item $env:temp\$resultsfolder -recurse -force -erroraction silentlycontinue
        executor: powershell
