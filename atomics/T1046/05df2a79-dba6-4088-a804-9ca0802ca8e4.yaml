api_version: "2.0"
name: Port-Scanning /24 Subnet with PowerShell
description: |
    Scanning common ports in a /24 subnet. If no IP address for the target subnet is specified the test tries to determine the attacking machine's "primary" IPv4 address first and then scans that address with a /24 netmask.
    The connection attempts to use a timeout parameter in milliseconds to speed up the scan. Please note the atomic might not print any output until the scans are completed.
args:
    - name: timeout_ms
      type: string
      default: "200"
    - name: ip_address
      type: string
    - name: port_list
      type: string
      default: 445, 3389
uuid: 05df2a79-dba6-4088-a804-9ca0802ca8e4
mitre:
    tactics:
        - 'TA0007: Discovery'
    techniques:
        - 'T1046: Network Service Discovery'
requirements:
    platforms:
        - os: windows
steps:
    - name: port-scanning-/24-subnet-with-powershell
      inline: |
        $ipAddr = "{{.Args.ip_address}}"
        if ($ipAddr -eq "") {
            # Assumes the "primary" interface is shown at the top
            $interface = Get-NetIPInterface -AddressFamily IPv4 -ConnectionState Connected | Select-Object -ExpandProperty InterfaceAlias -First 1
            Write-Host "[i] Using Interface $interface"
            $ipAddr = Get-NetIPAddress -AddressFamily IPv4 -InterfaceAlias $interface | Select-Object -ExpandProperty IPAddress
        }
        Write-Host "[i] Base IP-Address for Subnet: $ipAddr"
        $subnetSubstring = $ipAddr.Substring(0, $ipAddr.LastIndexOf('.') + 1)
        # Always assumes /24 subnet
        Write-Host "[i] Assuming /24 subnet. scanning $subnetSubstring'1' to $subnetSubstring'254'"

        $ports = {{.Args.port_list}}
        $subnetIPs = 1..254 | ForEach-Object { "$subnetSubstring$_" }

        foreach ($ip in $subnetIPs) {
            foreach ($port in $ports) {
              try {
                  $tcp = New-Object Net.Sockets.TcpClient
                  $tcp.ConnectAsync($ip, $port).Wait({{.Args.timeout_ms}}) | Out-Null
              } catch {}
              if ($tcp.Connected) {
                  $tcp.Close()
                  Write-Host "Port $port is open on $ip"
              }
            }
        }
      executor: powershell
      cleanup:
        inline: ""
        executor: powershell
