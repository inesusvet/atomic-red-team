api_version: "2.0"
name: List Open Egress Ports
description: |
    This is to test for what ports are open outbound.  The technique used was taken from the following blog:
    https://www.blackhillsinfosec.com/poking-holes-in-the-firewall-egress-testing-with-allports-exposed/

    Upon successful execution, powershell will read top-128.txt (ports) and contact each port to confirm if open or not. Output will be to Desktop\open-ports.txt.
args:
    - name: output_file
      type: path
      default: $env:USERPROFILE\Desktop\open-ports.txt
    - name: portfile_url
      type: string
      default: https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1016/src/top-128.txt
    - name: port_file
      type: path
      default: PathToAtomicsFolder\T1016\src\top-128.txt
uuid: 4b467538-f102-491d-ace7-ed487b853bf5
mitre:
    tactics:
        - 'TA0007: Discovery'
    techniques:
        - 'T1016: System Network Configuration Discovery'
requirements:
    platforms:
        - os: windows
steps:
    - name: |
        Test requires #{port_file} to exist
      inline: |
        if (Test-Path "#{port_file}") {exit 0} else {{New-Item -Type Directory (split-path "#{port_file}") -ErrorAction ignore | Out-Null
        Invoke-WebRequest "#{portfile_url}" -OutFile "#{port_file}"
        }}
      executor: powershell
    - name: list-open-egress-ports
      inline: "$ports = Get-content \"{{.Args.port_file}}\"\n$file = \"{{.Args.output_file}}\"\n$totalopen = 0\n$totalports = 0\nNew-Item $file -Force\nforeach ($port in $ports) {\n    $test = new-object system.Net.Sockets.TcpClient\n    $wait = $test.beginConnect(\"allports.exposed\", $port, $null, $null)\n    $wait.asyncwaithandle.waitone(250, $false) | Out-Null\n    $totalports++ | Out-Null\n    if ($test.Connected) {\n        $result = \"$port open\" \n        Write-Host -ForegroundColor Green $result\n        $result | Out-File -Encoding ASCII -append $file\n        $totalopen++ | Out-Null\n    }\n    else {\n        $result = \"$port closed\" \n        Write-Host -ForegroundColor Red $result\n        $totalclosed++ | Out-Null\n        $result | Out-File -Encoding ASCII -append $file\n    }\n}\n$results = \"There were a total of $totalopen open ports out of $totalports ports tested.\"\n$results | Out-File -Encoding ASCII -append $file\nWrite-Host $results\n"
      executor: powershell
      cleanup:
        inline: |
            Remove-Item -ErrorAction ignore "{{.Args.output_file}}"
        executor: powershell
