api_version: "2.0"
name: Read-Write-Execute process Injection
description: "This test exploited the vulnerability in legitimate PE formats where sections have RWX permission and enough space for shellcode.\nThe RWX injection avoided the use of VirtualAlloc, WriteVirtualMemory, and ProtectVirtualMemory, thus evading detection mechanisms \nthat relied on API call sequences and heuristics. The RWX injection utilises API call sequences: LoadLibrary --> GetModuleInformation --> GetModuleHandleA --> RtlCopyMemory --> CreateThread.\nThe injected shellcode will open a message box and a notepad.\nRWX Process Injection, also known as MockingJay, was introduced to the security community by SecurityJoes.\nMore details can be found at https://www.securityjoes.com/post/process-mockingjay-echoing-rwx-in-userland-to-achieve-code-execution.\nThe original injector and idea were developed for game cheats, as visible at https://github.com/M-r-J-o-h-n/SWH-Injector.\n"
args:
    - name: vuln_dll
      type: path
      default: PathToAtomicsFolder\T1055\bin\x64\vuln_dll\msys-2.0.dll
uuid: 0128e48e-8c1a-433a-a11a-a5387384f1e1
mitre:
    tactics:
        - 'TA0005: Defense Evasion'
        - 'TA0004: Privilege Escalation'
    techniques:
        - 'T1055: Process Injection'
requirements:
    platforms:
        - os: windows
steps:
    - name: read-write-execute-process-injection
      inline: |
        $address = (& "$PathToAtomicsFolder\T1055\bin\x64\searchVuln.exe" "$PathToAtomicsFolder\T1055\bin\x64\vuln_dll\" | Out-String | Select-String -Pattern "VirtualAddress: (\w+)").Matches.Groups[1].Value
        & "PathToAtomicsFolder\T1055\bin\x64\RWXinjectionLocal.exe" "{{.Args.vuln_dll}}" $address
      executor: powershell
      cleanup:
        inline: Get-Process -Name Notepad -ErrorAction SilentlyContinue | Stop-Process -Force
        executor: powershell
