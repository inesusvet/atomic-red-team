api_version: "2.0"
name: UUID custom process Injection
description: |
    The UUIDs Process Injection code was first introduced by the NCC Group. The code can be stored in UUID forms on the heap and converted back to binary via UuidFromStringA at runtime. In this new custom version of UUID injection, EnumSystemLocalesA is the only API called to execute the code. We used custom UuidToString and UuidFromString implementations to avoid using UuidFromStringA and RPCRT4.dll, thereby eliminating the static signatures. This technique also avoided the use of VirtualAlloc, WriteProcessMemory and CreateThread

    The injected shellcode will open a message box and a notepad.

    Reference to NCC Group: https://research.nccgroup.com/2021/01/23/rift-analysing-a-lazarus-shellcode-execution-method/
    Concept from: http://ropgadget.com/posts/abusing_win_functions.html
args:
    - name: exe_binary
      type: path
      default: PathToAtomicsFolder\T1055\bin\x64\uuid_injection.exe
uuid: 0128e48e-8c1a-433a-a11a-a5304734f1e1
mitre:
    tactics:
        - 'TA0005: Defense Evasion'
        - 'TA0004: Privilege Escalation'
    techniques:
        - 'T1055: Process Injection'
requirements:
    platforms:
        - os: windows
steps:
    - name: |
        Portable Executable to inject must exist at specified location (#{exe_binary})
      inline: |
        if (Test-Path "#{exe_binary}") {exit 0} else {{New-Item -Type Directory (split-path "#{exe_binary}") -ErrorAction ignore | Out-Null
        Invoke-WebRequest "https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1055/bin/x64/uuid_injection.exe" -OutFile "#{exe_binary}"
        }}
      executor: powershell
    - name: uuid-custom-process-injection
      inline: |-
        Start-Process "{{.Args.exe_binary}}"
        Start-Sleep -Seconds 7
        Get-Process -Name Notepad -ErrorAction SilentlyContinue | Stop-Process -Force
      executor: powershell
      cleanup:
        inline: Get-Process -Name Notepad -ErrorAction SilentlyContinue | Stop-Process -Force
        executor: powershell
