api_version: "2.0"
name: Azure AD - adding service principal to Azure AD role
description: "The adversaries want to add service principal to some Azure AD role. Threat actor \nmay be interested primarily in highly privileged roles, e.g. Global Administrator, Application Administrator, \nPrivileged Authentication Administrator (this role can reset Global Administrator password!).\nBy default, the role Global Reader is assigned to service principal in this test.\n\nThe account you use to run the PowerShell command should have Privileged Role Administrator or Global Administrator role in your Azure AD.\n\nDetection hint - check Activity \"Add member to role\" in Azure AD Audit Logs. In targer you will also see Service Principal as a type.\n"
args:
    - name: password
      type: string
      default: p4sswd
    - name: service_principal_name
      type: string
      default: SuperSP
    - name: role_name
      type: string
      default: Global Reader
    - name: username
      type: string
      default: jonh@contoso.com
uuid: 92c40b3f-c406-4d1f-8d2b-c039bf5009e4
mitre:
    tactics:
        - 'TA0003: Persistence'
        - 'TA0004: Privilege Escalation'
    techniques:
        - 'T1098: Account Manipulation'
requirements:
    platforms:
        - os: azure-ad
steps:
    - name: azure-ad---adding-service-principal-to-azure-ad-role
      inline: |
        Import-Module -Name AzureAD
        $PWord = ConvertTo-SecureString -String "{{.Args.password}}" -AsPlainText -Force
        $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList "{{.Args.username}}", $Pword
        Connect-AzureAD -Credential $Credential

        $sp = Get-AzureADServicePrincipal -Filter "DisplayName eq '{{.Args.service_principal_name}}'"
        if ($sp -eq $null) { Write-Warning "Service Principal not found"; exit }
        $role = Get-AzureADDirectoryRole -Filter "DisplayName eq '{{.Args.role_name}}'"
        if ($role -eq $null) { Write-Warning "Role not found"; exit }
        Add-AzureADDirectoryRoleMember -ObjectId $role.ObjectId -RefObjectId $sp.ObjectId
        Write-Host "Service Principal $($sp.DisplayName) was added to $($role.DisplayName)"
      executor: powershell
      cleanup:
        inline: |
            Import-Module -Name AzureAD -ErrorAction Ignore
            $PWord = ConvertTo-SecureString -String "{{.Args.password}}" -AsPlainText -Force
            $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList "{{.Args.username}}", $Pword
            Connect-AzureAD -Credential $Credential -ErrorAction Ignore

            $sp = Get-AzureADServicePrincipal -Filter "DisplayName eq '{{.Args.service_principal_name}}'"
            if ($sp -eq $null) { Write-Warning "Service Principal not found"; exit }
            $role = Get-AzureADDirectoryRole -Filter "DisplayName eq '{{.Args.role_name}}'"
            if ($role -eq $null) { Write-Warning "Role not found"; exit }

            Remove-AzureADDirectoryRoleMember -ObjectId $role.ObjectId -MemberId $sp.ObjectId
            Write-Host "Service Principal $($sp.DisplayName) was removed from $($role.DisplayName) role"
        executor: powershell
