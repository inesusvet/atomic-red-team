api_version: "2.0"
name: 'Domain Password Policy Check: No Special Character in Password'
description: "Attempt to change the password of the current domain user in order to check password policy. Ideally, you would only run this atomic test to verify that your password policy is blocking the use of the new password.\nIf the password is succesfully changed to the new password, the credential file will be updated to reflect the new password. You can then run the atomic manually and specify a new password of your choosing, however the\npassword policy will likely prevent you from setting the password back to what it was. \n"
args:
    - name: new_password
      type: string
      default: UpperLowerLong333noSpecialChar
    - name: cred_file
      type: path
      default: $env:LOCALAPPDATA\AtomicRedTeam\$env:USERNAME.txt
uuid: 7d984ef2-2db2-4cec-b090-e637e1698f61
mitre:
    tactics:
        - 'TA0003: Persistence'
        - 'TA0004: Privilege Escalation'
    techniques:
        - 'T1098: Account Manipulation'
requirements:
    platforms:
        - os: windows
steps:
    - name: domain-password-policy-check:-no-special-character-in-password
      inline: "$credFile = \"{{.Args.cred_file}}\"\nif (Test-Path $credFile) {\n    $cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $env:USERNAME, (Get-Content $credFile | ConvertTo-SecureString)\n    if($cred.GetNetworkCredential().Password -eq \"{{.Args.new_password}}\"){\n      Write-Host -ForegroundColor Yellow \"The new password is the same as the password stored in the credential file. Please specify a different new password.\"; exit -1\n    }\n    try {\n        $newPassword = ConvertTo-SecureString {{.Args.new_password}} -AsPlainText -Force\n        Set-ADAccountPassword -Identity $env:USERNAME -OldPassword $cred.password -NewPassword $newPassword\n    }\n    catch { \n        $_.Exception\n        $errCode = $_.Exception.ErrorCode\n        Write-Host \"Error code: $errCode\"\n        if ($errCode -eq 86) {\n            Write-Host -ForegroundColor Yellow \"The stored password for the current user is incorrect. Please run the prereq commands to set the correct credentials\"\n            Remove-Item $credFile\n        }\n        exit $errCode\n    }\n    Write-Host -ForegroundColor Cyan \"Successfully changed the password to {{.Args.new_password}}\"\n    $newCred = New-Object System.Management.Automation.PSCredential ($env:USERNAME, $(ConvertTo-SecureString \"{{.Args.new_password}}\" -AsPlainText -Force))\n    $newCred.Password | ConvertFrom-SecureString | Out-File $credFile\n}\nelse {\n    Write-Host -ForegroundColor Yellow \"You must store the password of the current user by running the prerequisite commands first\"\n}\n"
      executor: powershell
      cleanup:
        inline: ""
        executor: powershell
