api_version: "2.0"
name: Azure AD - adding user to Azure AD role
description: "The adversaries want to add user to some Azure AD role. Threat actor \nmay be interested primarily in highly privileged roles, e.g. Global Administrator, Application Administrator, \nPrivileged Authentication Administrator (this role can reset Global Administrator password!).\nBy default, the role Global Reader is assigned to the user principal in this test.\n\nThe account you use to run the PowerShell command should have Privileged Role Administrator or Global Administrator role in your Azure AD.\n\nDetection hint - check Activity \"Add member to role\" in Azure AD Audit Logs. In targer you will also see User as a type.\n"
args:
    - name: username
      type: string
      default: jonh@contoso.com
    - name: password
      type: string
      default: p4sswd
    - name: user_principal_name
      type: string
      default: SuperUser
    - name: role_name
      type: string
      default: Global Reader
uuid: 0e65ae27-5385-46b4-98ac-607a8ee82261
mitre:
    tactics:
        - 'TA0003: Persistence'
        - 'TA0004: Privilege Escalation'
    techniques:
        - 'T1098: Account Manipulation'
requirements:
    platforms:
        - os: azure-ad
steps:
    - name: azure-ad---adding-user-to-azure-ad-role
      inline: |
        Import-Module -Name AzureAD
        $PWord = ConvertTo-SecureString -String "{{.Args.password}}" -AsPlainText -Force
        $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList "{{.Args.username}}", $Pword
        Connect-AzureAD -Credential $Credential

        $user = Get-AzureADUser -Filter "DisplayName eq '{{.Args.user_principal_name}}' or UserPrincipalName eq '{{.Args.user_principal_name}}'"
        if ($user -eq $null) { Write-Warning "User not found"; exit }
        $role = Get-AzureADDirectoryRole -Filter "DisplayName eq '{{.Args.role_name}}'"
        if ($role -eq $null) { Write-Warning "Role not found"; exit }
        Add-AzureADDirectoryRoleMember -ObjectId $role.ObjectId -RefObjectId $user.ObjectId
        Write-Host "User $($user.DisplayName) was added to $($role.DisplayName) role"
      executor: powershell
      cleanup:
        inline: |
            Import-Module -Name AzureAD -ErrorAction Ignore
            $PWord = ConvertTo-SecureString -String "{{.Args.password}}" -AsPlainText -Force
            $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList "{{.Args.username}}", $Pword
            Connect-AzureAD -Credential $Credential -ErrorAction Ignore

            $user = Get-AzureADUser -Filter "DisplayName eq '{{.Args.user_principal_name}}' or UserPrincipalName eq '{{.Args.user_principal_name}}'"
            if ($user -eq $null) { Write-Warning "User not found"; exit }
            $role = Get-AzureADDirectoryRole -Filter "DisplayName eq '{{.Args.role_name}}'"
            if ($role -eq $null) { Write-Warning "Role not found"; exit }

            Remove-AzureADDirectoryRoleMember -ObjectId $role.ObjectId -MemberId $user.ObjectId
            Write-Host "User $($user.DisplayName) was removed from $($role.DisplayName) role"
        executor: powershell
