api_version: "2.0"
name: Domain Account and Group Manipulate
description: "Create a random atr-nnnnnnnn account and add it to a domain group (by default, Domain Admins). \n\nThe quickest way to run it is against a domain controller, using `-Session` of `Invoke-AtomicTest`. Alternatively,\nyou need to install PS Module ActiveDirectory (in prereqs) and run the script with appropriare AD privileges to \ncreate the user and alter the group. Automatic installation of the dependency requires an elevated session, \nand is unlikely to work with Powershell Core (untested).\n\nIf you consider running this test against a production Active Directory, the good practise is to create a dedicated\nservice account whose delegation is given onto a dedicated OU for user creation and deletion, as well as delegated\nas group manager of the target group.\n\nExample: `Invoke-AtomicTest -Session $session 'T1098' -TestNames \"Domain Account and Group Manipulate\" -InputArgs @{\"group\" = \"DNSAdmins\" }`\n"
args:
    - name: account_prefix
      type: string
      default: atr-
    - name: group
      type: string
      default: Domain Admins
    - name: create_args
      type: string
uuid: a55a22e9-a3d3-42ce-bd48-2653adb8f7a9
mitre:
    tactics:
        - 'TA0003: Persistence'
        - 'TA0004: Privilege Escalation'
    techniques:
        - 'T1098: Account Manipulation'
requirements:
    platforms:
        - os: windows
steps:
    - name: domain-account-and-group-manipulate
      inline: |
        $x = Get-Random -Minimum 2 -Maximum 99
        $y = Get-Random -Minimum 2 -Maximum 99
        $z = Get-Random -Minimum 2 -Maximum 99
        $w = Get-Random -Minimum 2 -Maximum 99

        Import-Module ActiveDirectory
        $account = "{{.Args.account_prefix}}-$x$y$z"
        New-ADUser -Name $account -GivenName "Test" -DisplayName $account -SamAccountName $account -Surname $account -Enabled:$False {{.Args.create_args}}
        Add-ADGroupMember "{{.Args.group}}" $account
      executor: powershell
      cleanup:
        inline: |
            Get-ADUser -LDAPFilter "(&(samaccountname={{.Args.account_prefix}}-*)(givenName=Test))" | Remove-ADUser -Confirm:$False
        executor: powershell
