api_version: "2.0"
name: Simulating access to Opera Login Data
description: "Simulates an adversary accessing encrypted credentials from Opera web browser's login database. \n"
uuid: 28498c17-57e4-495a-b0be-cc1e36de408b
mitre:
    tactics:
        - 'TA0006: Credential Access'
    techniques:
        - 'T1555: Credentials from Password Stores'
    subtechniques:
        - 'T1555.003: Credentials from Web Browsers'
requirements:
    platforms:
        - os: windows
steps:
    - name: |
        Opera must be installed
      inline: |-
        if (((Test-Path "$env:LOCALAPPDATA\Programs\Opera\launcher.exe") -Or (Test-Path "C:\Program Files\Opera\launcher.exe") -Or (Test-Path "C:\Program Files (x86)\Opera\launcher.exe"))) {exit 0} else {{New-Item -Type Directory "PathToAtomicsFolder\..\ExternalPayloads\" -ErrorAction Ignore -Force | Out-Null
        $installer = "PathToAtomicsFolder\..\ExternalPayloads\OperaStandaloneInstaller.exe"
        Invoke-WebRequest -OutFile "PathToAtomicsFolder\..\ExternalPayloads\OperaStandaloneInstaller.exe" https://get.geo.opera.com/pub/opera/desktop/82.0.4227.43/win/Opera_82.0.4227.43_Setup.exe
        Start-Process $installer -ArgumentList '/install /silent /launchopera=1 /setdefaultbrowser=0'
        Start-Sleep -s 180
        Stop-Process -Name "opera"
        }}
      executor: powershell
    - name: |
        Opera login data file must exist
      inline: |-
        if (Test-Path "$env:APPDATA\Opera Software\Opera Stable\Login Data") {exit 0} else {{New-Item -Path "$env:APPDATA\Opera Software\Opera Stable\Login Data" -ItemType File
        }}
      executor: powershell
    - name: simulating-access-to-opera-login-data
      inline: |
        Copy-Item "$env:APPDATA\Opera Software\Opera Stable\Login Data" -Destination "PathToAtomicsFolder\..\ExternalPayloads"
      executor: powershell
      cleanup:
        inline: |
            Remove-Item -Path "PathToAtomicsFolder\..\ExternalPayloads\Login Data" -Force -ErrorAction Ignore
        executor: powershell
